upstream uwsgi_{{app_name}} {
    server unix:///tmp/{{app_name}}-wsgi.sock fail_timeout=5;
}

{% if deploymenthost == "prod" %}
server {
    listen 80;
    listen 443;
    server_name {{app_name}}.com;
    return 301 https://www.{{app_name}}.com$request_uri;
}
{% endif %}

server {
  listen 80;
  return 301 https://$host$request_uri;
}

server {
    listen 443 ssl default_server;
    server_name {{server_name}};

    if ($host !~* .*\.{{app_name}}\..*) {
        set $elb_health_check F;
    }

    if ($http_user_agent = "ELB-HealthChecker/1.0") {
        set $elb_health_check T;
    }

    if ($elb_health_check = F) {
        return 444;
    }

    ssl_session_cache    shared:SSL:10m;
    ssl_session_timeout  10m;
    ssl_ciphers RC4:HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    client_max_body_size 32m;

    {% if deploymenthost != 'local' and deploymenthost != 'prod' %}

    # Allow some internal ips;
    allow 209.234.175.138;

    deny all;
    {% endif %}


    {% if deploymenthost == 'staging' or deploymenthost == 'prod' %}
    error_page 500 502 503 504  /error_pages/50x.html;
    uwsgi_intercept_errors    on;
    location /error_pages/50x.html {
        root  /etc/nginx/static_error_pages/;
    }

    location /50x_files/ {
        root  /etc/nginx/static_error_pages/error_pages;
    }
    {% endif %}

    location / {
        include     /etc/nginx/uwsgi_params;
        uwsgi_pass  uwsgi_{{app_name}};
        uwsgi_read_timeout  1200;
        uwsgi_send_timeout  1200;
        proxy_send_timeout  1200;
        proxy_read_timeout  1200;
        proxy_connect_timeout   1200;
        client_body_buffer_size   1000000;

        # CORS config comes from http://enable-cors.org/server_nginx.html
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            #
            # Om nom nom cookies
            #
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            #
            # Custom headers and headers various browsers *should* be OK with but aren't
            #
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Accept-Encoding';
            #
            # Tell client that this pre-flight info is valid for 20 days
            #
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        if ($request_method = 'POST') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Accept-Encoding';
        }
        if ($request_method = 'GET') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Accept-Encoding';
        }
    }

    location ^~ /admin/ {
        expires 0;
        add_header Cache-Control private;

        #if ($http_user_agent = "Amazon CloudFront") {
        #    rewrite ^(.*)$ https:// proxy_origin $1 permanent;
        #}

        {% if deploymenthost != 'local' %}
        #if ($remote_addr !=  internal_ip ) {
        #    # Redirect back to root
        #    rewrite ^(.*) https://$host permanent;
        #}
        {% endif %}

        uwsgi_read_timeout  120;
        uwsgi_pass  uwsgi_{{app_name}};
        include     /etc/nginx/uwsgi_params;
    }

    location ^~ /static/ {
        {% if deploymenthost == 'local' %}
            alias {{app_static}};
        {% else %}
            expires {{ media_browser_expires_seconds|default('3600') }};
            add_header Cache-Control s-maxage={{ static_expires_seconds|default('15') }};
            rewrite ^/static/(.*)$ /$1 break;

            proxy_set_header Host {{ s3_bucket }}.s3.amazonaws.com;
            proxy_set_header Authorization '';
            proxy_pass_request_body off;
            proxy_hide_header x-amz-id-2;
            proxy_hide_header x-amz-request-id;
            proxy_hide_header Set-Cookie;
            proxy_ignore_headers "Set-Cookie";
            proxy_buffering off;
            proxy_intercept_errors on;

            proxy_pass http://{{ s3_bucket }}.s3.amazonaws.com;
        {% endif %}
    }

    location ^~ /media/ {
        add_header Cache-Control max-age={{ cache_max_age|default('15') }};
        add_header Cache-Control s-maxage={{ cache_s_maxage|default('15') }};

        {% if deploymenthost == 'local' %}
            alias {{app_media}};
        {% else %}
            proxy_set_header Host {{ s3_bucket }}.s3.amazonaws.com;
            proxy_set_header Authorization '';
            proxy_pass_request_body off;
            proxy_hide_header x-amz-id-2;
            proxy_hide_header x-amz-request-id;
            proxy_hide_header Set-Cookie;
            proxy_ignore_headers "Set-Cookie";
            proxy_buffering off;
            proxy_intercept_errors on;

            proxy_pass https://{{ s3_bucket }}.s3.amazonaws.com;
        {% endif %}
    }

    location = /ping {
        allow 0.0.0.0/0;
        access_log off;
        include     /etc/nginx/uwsgi_params;
        uwsgi_pass  uwsgi_{{app_name}};
    }
}
